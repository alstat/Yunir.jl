var documenterSearchIndex = {"docs":
[{"location":"man/rhythmic_analysis/#Rhythmic-Analysis","page":"Rhytmic Analysis","title":"Rhythmic Analysis","text":"","category":"section"},{"location":"man/rhythmic_analysis/","page":"Rhytmic Analysis","title":"Rhytmic Analysis","text":"Pre-Islamic civilization in Arabia is known for their expertise in poetry prior to Qur'an. Such prevalence in Arabic language may invoke some interest in studying the rhythmic signatures of these texts. There are no resources that looked into this computationally until the recent work of Asaad [1].","category":"page"},{"location":"man/rhythmic_analysis/#Classic-Poetry","page":"Rhytmic Analysis","title":"Classic Poetry","text":"","category":"section"},{"location":"man/rhythmic_analysis/","page":"Rhytmic Analysis","title":"Rhytmic Analysis","text":"Thi","category":"page"},{"location":"man/rhythmic_analysis/#References","page":"Rhytmic Analysis","title":"References","text":"","category":"section"},{"location":"man/rhythmic_analysis/","page":"Rhytmic Analysis","title":"Rhytmic Analysis","text":"A.-A. B. Asaad. Text Analytics of the Qur'ān. Master's thesis, University of the Philippines (06 2025).\n\n\n\n","category":"page"},{"location":"man/symmetry_analysis/#Symmetric-Analysis","page":"Symmetry Analysis","title":"Symmetric Analysis","text":"","category":"section"},{"location":"man/symmetry_analysis/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"The work of Farrin [2]","category":"page"},{"location":"man/symmetry_analysis/#References","page":"Symmetry Analysis","title":"References","text":"","category":"section"},{"location":"man/symmetry_analysis/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"R. Farrin. Structure and Qur'anic Interpretation: A Study of Symmetry and Coherence in Islam's Holy Text. Islamic Encounter (White Cloud Press, 2014).\n\n\n\n","category":"page"},{"location":"man/text_alignment/#Text-Alignment","page":"Text Alignment","title":"Text Alignment","text":"","category":"section"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Text alignment is used for pairwise comparison of texts (e.g. books), with the aim of checking for deletions, insertions, matches and mismatches in the target texts relative to a reference texts. This is the same task as sequence alignment of two DNA sequence as in Biology. Indeed, Yunir.jl supports this by extending the BioAlignments.jl APIs  to sequence of Arabic texts. Yunir.jl uses align function for aligning two texts.","category":"page"},{"location":"man/text_alignment/#How-it-works","page":"Text Alignment","title":"How it works","text":"","category":"section"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"The way it works is that, BioAlignments.jl requires a Roman characters as input for pairwise alignment. Therefore, any Arabic characters must first be transliterated to Roman characters. This is possible using Yunir.jl's encode function. The resulting alignment, which is in Roman characters, is then transliterated back to Arabic for easy interpretation.","category":"page"},{"location":"man/text_alignment/#KITAB-project's-text-reuse","page":"Text Alignment","title":"KITAB project's text reuse","text":"","category":"section"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"We will consider a simple example based on \"text reuse\" case study of KITAB project. The following are portions of two books with IDs Shamela0012129-ara1 and Shamela0023790-ara1 which was detected by \"passim\" (the tool used by KITAB project) as similar. The goal is to compare the two input texts by aligning the characters, and see the similarity based on matches, mismatches, deletions and insertions of characters. In the example texts below, we'll confirm the matches and see how Yunir.jl's APIs work on text alignment.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"<table>\n    <thead>\n        <th>Shamela0012129-ara1</th>\n        <th>Shamela0023790-ara1</th>\n    </thead>\n    <tbody>\n        <tr>\n            <td>خرج مع ابي بكر الصديق رضي الله عنه في تجارة الي بصري ومعهم نعيمان وكان نعيمان ممن شهد——- بدرا ايضا وك——-ان علي الزاد فقال له سويبط———– اطعمني فقال حتي يجء ابو بكر فقال اما والله لاغيظنك فمروا بقوم فقال لهم سويبط -تشترون مني عبدا قا—لوا نعم فقال انه عبد له كلام وهو قاءل لكم اني حر فان كنتم اذا قال لكم هذه المقالة تركتموه فلا تفسدوا علي عبدي قا-لوا بل نشتريه منك فاشتروه بعشر قلاءص ثم جاءوا فوضعوا في عنقه حبلا ف—————قال نعيمان ان هذا يستهزء بكم واني حر فقالوا قد عرفنا –خبرك وانطلقوا به فلما جاء ابو بكر -اخبروه فاتبعهم ورد عليهم القلاءص واخذه فلما قدموا علي النبي صلي الله عليه وسلم اخبروه فضحك هو واصحابه من ذلك حولا</td>\n            <td>خرج— ابو بكر——————– في تجارة——— ومعه- نعيمان وسويبط بن حرملة وكانا شهدا بدر—–ا وكان نعيمان علي الزاد فقال له سويبط وكان مزاحا اطعمني فقال حتي يجء ابو بكر فقال اما والله لاغيظنك فمروا بقوم فقال لهم سويبط اتشترون مني عبدا لي قالوا نعم ق-ال انه عبد له كلام وهو قاءل لكم اني حر فان كنتم اذا قال لكم هذه المقالة تركتموه فلا تفسدوا علي عبدي فقالوا بل نشتريه منك——– بعشر قلاءص ثم جاءوا فوضعوا في عنقه حبلا وعمامة واشتروه فقال نعيمان ان هذا يستهزء بكم واني حر قا-لوا قد اخبرنا بخبرك وانطلقوا به و—-جاء ابو بكر فاخبروه فاتبعهم فرد عليهم القلاءص واخذه فلما قدموا علي النبي صلي الله عليه وسلم اخبروه فضحك هو واصحابه منهما- حول</td>\n        </tr>\n    </tbody>\n</table>","category":"page"},{"location":"man/text_alignment/#Data-processing","page":"Text Alignment","title":"Data processing","text":"","category":"section"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"To have a quality output, we will need to process the texts to remove unnecessary noise. First, we need to remove all non-Arabic characters. To start with, the following will input the two candidate texts:","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"using Yunir\n\nshamela0012129 = \"خرج مع ابي بكر الصديق رضي الله عنه في تجارة الي بصري ومعهم نعيمان وكان نعيمان ممن شهد——- بدرا ايضا وك——-ان علي الزاد فقال له سويبط———– اطعمني فقال حتي يجء ابو بكر فقال اما والله لاغيظنك فمروا بقوم فقال لهم سويبط -تشترون مني عبدا قا—لوا نعم فقال انه عبد له كلام وهو قاءل لكم اني حر فان كنتم اذا قال لكم هذه المقالة تركتموه فلا تفسدوا علي عبدي قا-لوا بل نشتريه منك فاشتروه بعشر قلاءص ثم جاءوا فوضعوا في عنقه حبلا ف—————قال نعيمان ان هذا يستهزء بكم واني حر فقالوا قد عرفنا –خبرك وانطلقوا به فلما جاء ابو بكر -اخبروه فاتبعهم ورد عليهم القلاءص واخذه فلما قدموا علي النبي صلي الله عليه وسلم اخبروه فضحك هو واصحابه من ذلك حولا\";\nshamela0023790 = \"خرج— ابو بكر——————– في تجارة——— ومعه- نعيمان وسويبط بن حرملة وكانا شهدا بدر—–ا وكان نعيمان علي الزاد فقال له سويبط وكان مزاحا اطعمني فقال حتي يجء ابو بكر فقال اما والله لاغيظنك فمروا بقوم فقال لهم سويبط اتشترون مني عبدا لي قالوا نعم ق-ال انه عبد له كلام وهو قاءل لكم اني حر فان كنتم اذا قال لكم هذه المقالة تركتموه فلا تفسدوا علي عبدي فقالوا بل نشتريه منك——– بعشر قلاءص ثم جاءوا فوضعوا في عنقه حبلا وعمامة واشتروه فقال نعيمان ان هذا يستهزء بكم واني حر قا-لوا قد اخبرنا بخبرك وانطلقوا به و—-جاء ابو بكر فاخبروه فاتبعهم فرد عليهم القلاءص واخذه فلما قدموا علي النبي صلي الله عليه وسلم اخبروه فضحك هو واصحابه منهما- حول\";","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Next, we remove the non-Arabic characters like the dashes using the clean function:","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"shamela0012129_cln = clean(shamela0012129)\nshamela0023790_cln = clean(shamela0023790)","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"tips: Tips\nThe clean function removes the non-Arabic characters through RegEx or Regular Expression, which is set at the third argument of the function. That is, clean(shamela0012129) is actually equivalent to:clean(shamela0012129; replace_non_ar=\"\", target_regex=r\"[A-Za-z0-9\\(:×\\|\\–\\[\\«\\»\\]~\\)_@./#&+\\—-]*\")In case there are still non-Arabic characters not captured using the default regex, simply insert it to the default pattern.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"warning: Caution\nIt is important that all non-Arabic characters be removed since any special character might be transliterated to a particular Arabic character once transliterating the output back to Arabic, and the result might mislead. See the section \"How it works\" above.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Next, we need to normalize the word Allah, الله, into a single Unicode U+FDF2. This is because this word or name consist of 4 consonants, but most software assigns this into a single Unicode when detected, and hence it is better to convert it in the first place. This is also true with Lam-Alif, ﻻ, composed of two letters but we can assign it to a single Unicode U+FEFB. To do this, we define a mapping of these characters for the normalizer and then use it to normalize the input texts.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"mapping = Dict(\n    \"الله\" => \"ﷲ\",\n    \"لا\" => \"ﻻ\"\n);\nshamela0012129_nrm = normalize(shamela0012129_cln, mapping)\nshamela0023790_nrm = normalize(shamela0023790_cln, mapping)","category":"page"},{"location":"man/text_alignment/#Encoding","page":"Text Alignment","title":"Encoding","text":"","category":"section"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"As emphasized above, Yunir.jl is based on BioAlignments.jl APIs to do the pairwise alignment, and BioAlignments.jl requires  a Roman input character. Therefore, the input Arabic texts need to be encoded or transliterated to Roman characters.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"shamela0012129_enc = encode(shamela0012129_nrm)\nshamela0023790_enc = encode(shamela0023790_nrm)","category":"page"},{"location":"man/text_alignment/#Alignment","page":"Text Alignment","title":"Alignment","text":"","category":"section"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Finally, we can do the alignment as follows:","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"res1 = align(shamela0012129_enc, shamela0023790_enc);\nres1","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Unfortunately, many software and text editors including the Julia REPL have default left-to-right printing, and hence the alignment above is not clear. What you can do is to copy the output above and paste it into a text editor with Arabic Monospace font (e.g. Kawkab font), and set it to right-justified or set the text direction to right-to-left (RTL). Here is the result under the Notepad++ (after setting the text direction to RTL):","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"(Image: Alignment-Output-in-Text-Editor)","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"The result of the alignment is a list of groups of reference text indicated by the Arabic  character ١, and the target texts indicated by the Arabic character ٢. ","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"note: Definitions\nMatch, if the characters of reference and target did match, a Alif (i.e., ا) between their rows is placed. \nDeletion, if a tatweel (i.e., \"ـ\") is present in the target text, it means those tatweels represent the deletion of characters from the reference text. \nInsertion, if a tatweel is present in the reference text, it means an insertion of characters was done in the target text. \nMismatch, if both characters of target and reference texts did not match, a space is inserted between their rows.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"note: Note\nIf we did not normalize the word \"الله\" into a single character, there would be four Alif if all letters did match, but because most software prints this as a single character, then there will be four Alif for a single character, and this will make the output confusing to readers. This is true for لا as well.","category":"page"},{"location":"man/text_alignment/#Alignment-in-Buckwalter","page":"Text Alignment","title":"Alignment in Buckwalter","text":"","category":"section"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"We can actually extract the encoded version, which is in extended Buckwalter transliteration mapping. This can be accessed via the .alignment property of the res above. That is,","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"res1.alignment","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"This is the same with the result above, but this one is the Buckwalter encoded Arabic input.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"The number in the left side is the index of the first character in the row, whereas the number in the right side is the index of the last character in the row.","category":"page"},{"location":"man/text_alignment/#Alignment-statistics","page":"Text Alignment","title":"Alignment statistics","text":"","category":"section"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"From the results above, we can extract the score of the alignment which is a  distance measure between the reference and the target texts. The lower the score the similar the two texts therefore.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"score(res1)","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Other statistics are as follows","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"count_matches(res1)\ncount_mismatches(res1)\ncount_insertions(res1)\ncount_deletions(res1)\ncount_aligned(res1)","category":"page"},{"location":"man/text_alignment/#Multiple-Alignments","page":"Text Alignment","title":"Multiple Alignments","text":"","category":"section"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"At times, especially when working with books, the input texts are long enough that it becomes computationally expensive to do the alignment directly. A simple solution is to partition the input  texts into parts and do the alignment, pairing the texts by permutation. For example, in the KITAB's text reuse use case the books are partitioned into \"milestone\" which is indicated by a prefix ms in the texts. To mimick this, we'll add ms into the  shamela0012129 and shamela0023790 as follows:","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"shamela0012129 = \"خرج مع ابي بكر الصديق رضي الله عنه في تجارة الي بصري ومعهم نعيمان وكان نعيمان ممن شهد——- بدرا ايضا وك——-ان علي الزاد فقال له سويبط———– اطعمني فقال حتي يجء ابو بكر فقال اما والله لاغيظنك فمروا بقوم فقال لهم سويبط -تشترون مني عبدا قا—لوا نعم فقال انه عبد له كلام وهو قاءل لكم اني حر فان كنتم اذا قال لكم هذهmsتركتموه فلا تفسدوا علي عبدي قا-لوا بل نشتريه منك فاشتروه بعشر قلاءص ثم جاءوا فوضعوا في عنقه حبلا ف—————قال نعيمان ان هذا يستهزء بكم واني حر فقالوا قد عرفنا –خبرك وانطلقوا به فلما جاء ابو بكر -اخبروه فاتبعهم ورد عليهم القلاءص واخذه فلما قدموا علي النبي صلي الله عليه وسلم اخبروه فضحك هو واصحابه من ذلك حولا\";\nshamela0023790 = \"خرج— ابو بكر——————– في تجارة——— ومعه- نعيمان وسويبط بن حرملة وكانا شهدا بدر—–ا وكان نعيمان علي الزاد فقال له سويبط وكان مزاحا اطعمني فقال حتي يجء ابو بكر فقال اما والله لاغيظنك فمروا بقوم فقال لهم سويبط اتشترون مني عبدا لي قالوا نعم ق-ال انه عبد له كلام وهو قاءل لكم اني حر فان كنتم اذا قال لكم هذه المقالة تركتموهmsفلا تفسدوا علي عبدي فقالوا بل نشتريه منك——– بعشر قلاءص ثم جاءوا فوضعوا في عنقه حبلا وعمامة واشتروه فقال نعيمان ان هذا يستهزء بكم واني حر قا-لوا قد اخبرنا بخبرك وانطلقوا به و—-جاء ابو بكر فاخبروه فاتبعهم فرد عليهم القلاءص واخذه فلما قدموا علي النبي صلي الله عليه وسلم اخبروه فضحك هو واصحابه منهما- حول\";","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"We will then split this into milestones,","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"shamela0012129 = string.(split(shamela0012129, \"ms\"))\nshamela0023790 = string.(split(shamela0023790, \"ms\"))","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Then as before, we clean the splitted texts:","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"shamela0012129_cln = clean.(shamela0012129)\nshamela0023790_cln = clean.(shamela0023790)","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"note: Note\nIn Julia, we suffix the name of the function with . to broadcast the function to each item of the list. In this case, we clean each splitted texts.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Next, we normalize the characters as before:","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"mapping = Dict(\n    \"الله\" => \"ﷲ\",\n    \"لا\" => \"ﻻ\"\n);\nshamela0012129_nrm = normalize(shamela0012129_cln, mapping)\nshamela0023790_nrm = normalize(shamela0023790_cln, mapping)","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"And we encode them as follows","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"shamela0012129_enc = encode.(shamela0012129_nrm)\nshamela0023790_enc = encode.(shamela0023790_nrm)","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Finally, we run the alignment.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"res2, scr = align(shamela0012129_enc, shamela0023790_enc);","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Note that if the input texts are Array or Matrix the align function returns a tuple, comprising of the result of the alignment in Matrix, and the corresponding scores in Matrix.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Here is the score of the comparison, where the rows correspond to the index of the partitions of the reference text, and the  columns correspond to the index of the partitions of the target text.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"scr","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"The corresponding result of the score is also a Matrix, but it is huge since each cell of the matrix correspond to the result of the alignment and printing it would be difficult to understand. It is therefore better to simply index the Matrix to view only part of it.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"For example, the corresponding result of the score in the first row first column is given below","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"res2[1,1] # result of the score scr[1,1]","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"For the result of the score in the second row first column, we have","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"res2[2,1] # result of the score scr[2,1]","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Finally, as before we can extract the statistics for each result:","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"count_matches(res2[2,1])\ncount_mismatches(res2[2,1])\ncount_insertions(res2[2,1])\ncount_deletions(res2[2,1])\ncount_aligned(res2[2,1])","category":"page"},{"location":"man/text_alignment/#Visualization","page":"Text Alignment","title":"Visualization","text":"","category":"section"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"In this section, we are going to display the alignment by plotting the results.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"using CairoMakie\nf, a, xys = plot(res1, :matches, nchars=60)\na[1].xlabel = \"Shamela0023790\"\na[1].xlabelsize = 20\na[1].xticks = 0:2:unique(xys[1][1])[end]\na[3].xlabel = \"Shamela0012129\"\na[3].xlabelsize = 20\na[3].xticks = 0:2:unique(xys[2][1])[end]\nf","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"The figure above is divided into three subplots arranged in rows. You can think of the figure as two input text displayed in horizontal (i.e, sideways) orientation. In this orientation, the x-axis becomes the rows of the texts, that is, you can think of the x-axis as the rows of the texts in the book. In this case, we have two books, the reference and the target books. Each dot in reference and target corresponds to the characters that have matched. The lines and curves in the middle (colored in red) represent the connections of the rows of the texts where the matched happened. Further, the y-axis correspond to the length of the rows, in this case 60 characters per row. As you can see, the top tick label of the y-axis is 0 and the bottom tick label of the y-axis is 60, this is because the writing of Arabic is right-to-left, and so we can think of the 0th-tick at the top as the starting index of the first character in both texts, and the row ends at the 60th-tick at the bottom.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"We added further customization to the plot, readers are encouraged to explore the API.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"As for the plot of insertions of characters, we have:","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"f, a, xys = plot(res1, :insertions, nchars=60)\na[1].xlabel = \"Shamela0023790\"\na[1].xlabelsize = 20\na[1].xticks = 0:2:unique(xys[1][1])[end]\na[3].xlabel = \"Shamela0012129\"\na[3].xlabelsize = 20\na[3].xticks = 0:2:unique(xys[2][1])[end]\nf","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"For deletions, we have:","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"f, a, xys = plot(res1, :deletions, nchars=60)\na[1].xlabel = \"Shamela0023790\"\na[1].xlabelsize = 20\na[1].xticks = 0:2:unique(xys[1][1])[end]\na[3].xlabel = \"Shamela0012129\"\na[3].xlabelsize = 20\na[3].xticks = 0:2:unique(xys[2][1])[end]\nf","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"And for mismatches, we have","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"f, a, xys = plot(res1, :mismatches, nchars=60)\na[1].xlabel = \"Shamela0023790\"\na[1].xlabelsize = 20\na[1].xticks = 0:2:unique(xys[1][1])[end]\na[3].xlabel = \"Shamela0012129\"\na[3].xlabelsize = 20\na[3].xticks = 0:2:unique(xys[2][1])[end]\nf","category":"page"},{"location":"man/text_alignment/#Cost-Model","page":"Text Alignment","title":"Cost Model","text":"","category":"section"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"The pairwise alignment above works by minimizing a cost function, which is define by a cost model. It is important that we understand how the cost model is setup so that we can give proper scoring for the mismatches, matches, deletions and insertions. To define a cost model, we use BioAligments.jl's CostModel struct.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"The default cost model is given by","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"using BioAlignments\ncostmodel = CostModel(match=0, mismatch=1, insertion=1, deletion=1)","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"note: Interpretation of CostModel\nThe instantiated costmodel above tells us that, if a matched happened between the characters of the reference and the target texts, we set it to 0. Otherwise, that is, if mismatch, insertions or deletions happened, then the distance is 1.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"note: Optimization of the Alignment\nThe alignment is optimized by minimizing the cost function defined by the cost model, by prioritizing matches since it gives the algorithm a lower distance (which is 0)","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"If we set the costmodel to the following,","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"using BioAlignments\ncostmodel = CostModel(match=0, mismatch=10, insertion=3, deletion=1)","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Then if a mismatch happened, the algorithm will instead consider it a deletion as much as possible to avoid a distance score of 10 (for mismatch) and go for a distance of 1 (for deletion) instead.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Consider the following example,","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"using Yunir\netgt = \"رضي الله عنه\"\neref = \"صلي الله عليه وسلم\"\nmapping = Dict(\"الله\" => \"ﷲ\",)\netgt_nrm = normalize(etgt, mapping)\neref_nrm = normalize(eref, mapping)\ncostmodel = CostModel(match=0, mismatch=1, insertion=1, deletion=1);\nres_c1 = align(encode(eref_nrm), encode(etgt_nrm), costmodel=costmodel)\nres_c1","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Now, compare the result if we increased the mismatch and insertion in the cost model.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"costmodel = CostModel(match=0, mismatch=10, insertion=5, deletion=1)\nres_c2 = align(encode(eref_nrm), encode(etgt_nrm), costmodel=costmodel)\nres_c2","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"You can copy and paste the result to any text editor with Arabic monospace, like in Notepad++ screenshot above to see the alignment properly.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"You will notice that, in res_c1 above we have 3 mismatches, but in res_c2 the algorithm avoided assigning mismatches and instead prioritized deletions and insertions. This can be confirmed below:","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"count_mismatches(res_c1)\ncount_deletions(res_c1)\ncount_insertions(res_c1)\ncount_mismatches(res_c2)\ncount_deletions(res_c2)\ncount_insertions(res_c2)","category":"page"},{"location":"man/orthography/#Orthographical-Analysis","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"","category":"section"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"All Arabic characters and diacritics and other characters used in Arabic texts, such as the Qur'an are all encoded as structs or types. These types have properties that can be used for orthographical analysis. These properties are the vocal and numeral associated with each of the character.","category":"page"},{"location":"man/orthography/#Numerals","page":"Orthographical Analysis","title":"Numerals","text":"","category":"section"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"The numerals we refer here is the Abjad numeral.","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"using Yunir\n\nar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\";","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"If we want to take the numerals, we need to tokenize it first.","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"arb_token = tokenize(ar_basmala)","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"Next we then parse each of these words as   Orthography.","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"arb_parsed1 = parse(Orthography, arb_token[1])\narb_parsed2 = parse.(Orthography, arb_token)","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"Finally, we can compute the numerals of the parsed tokens as follows:","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"numerals(arb_parsed2[1])\nnumerals(arb_parsed2[2])\nnumerals(arb_parsed2[3])","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"We can also check the type of the characters, whether it is a Lunar or Solar character. To do this, use the isfeat (short for 'is feature' in the sense that characters here are also referred as feature).","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"isfeat(arb_parsed2[1], AbstractLunar)\narb_parsed2[1][isfeat(arb_parsed2[1], AbstractLunar)]\nisfeat.(arb_parsed2, AbstractLunar)\nisfeat.(arb_parsed2, AbstractSolar)","category":"page"},{"location":"man/orthography/#Vocals","page":"Orthographical Analysis","title":"Vocals","text":"","category":"section"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"Vocals refer to categorization of the characters based on the vocals it mainly uses in pronunciation.","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"vocals(arb_parsed2[1])\nvocals(arb_parsed2[2])\nvocals(arb_parsed2[3])","category":"page"},{"location":"man/orthography/#Simple-Encoding","page":"Orthographical Analysis","title":"Simple Encoding","text":"","category":"section"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"Simple encoding is a worded or spelled out transliteration of the arabic text.","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"parse(SimpleEncoding, ar_basmala)","category":"page"},{"location":"man/basic_utilities/#Basic-Utilities","page":"Basic Utilities","title":"Basic Utilities","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"In this section, we are going to discuss how to use the APIs for dediacritization, normalization, and transliteration.","category":"page"},{"location":"man/basic_utilities/#Dediacritization","page":"Basic Utilities","title":"Dediacritization","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"The function to use is dediac which works on either Arabic, Buckwalter or custom transliterated characters.","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"using Yunir\n\nar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\";\ndediac(ar_basmala)","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Or using Buckwalter as follows:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"bw_basmala = \"bisomi {ll~ahi {lr~aHoma`ni {lr~aHiymi\";\ndediac(bw_basmala; isarabic=false)","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"With Julia's broadcasting feature, the above dediacritization can be applied to arrays by simply adding . to the name of the function.","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"sentence0 = [\"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\",\n    \"إِيَّاكَ نَعْبُدُ وَإِيَّاكَ نَسْتَعِينُ\"\n]\ndediac.(sentence0)","category":"page"},{"location":"man/basic_utilities/#Normalization","page":"Basic Utilities","title":"Normalization","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"The function to use is normalize, which works on either Arabic, Buckwalter or custom transliterated characters. For example, using the ar_basmala and bw_basmala defined above, the normalized version would be","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"normalize(ar_basmala)\nnormalize(bw_basmala; isarabic=false)","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"You can also normalize specific characters, for example:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"normalize(ar_basmala, :alif_khanjareeya)\nnormalize(ar_basmala, :hamzat_wasl)\nsentence1 = \"وَٱلَّذِينَ يُؤْمِنُونَ بِمَآ أُنزِلَ إِلَيْكَ وَمَآ أُنزِلَ مِن قَبْلِكَ وَبِٱلْءَاخِرَةِ هُمْ يُوقِنُونَ\";\nnormalize(sentence1, :alif_maddah)\nnormalize(sentence1, :alif_hamza_above)\nsentence2 = \"إِيَّاكَ نَعْبُدُ وَإِيَّاكَ نَسْتَعِينُ\";\nnormalize(sentence2, :alif_hamza_below)\nsentence3 = \"ٱلَّذِينَ يُؤْمِنُونَ بِٱلْغَيْبِ وَيُقِيمُونَ ٱلصَّلَوٰةَ وَمِمَّا رَزَقْنَٰهُمْ يُنفِقُونَ\";\nnormalize(sentence3, :waw_hamza_above)\nnormalize(sentence3, :ta_marbuta)\nsentence4 = \"ٱللَّهُ يَسْتَهْزِئُ بِهِمْ وَيَمُدُّهُمْ فِى طُغْيَٰنِهِمْ يَعْمَهُونَ\";\nnormalize(sentence4, :ya_hamza_above)\nsentence5 = \"ذَٰلِكَ ٱلْكِتَٰبُ لَا رَيْبَ فِيهِ هُدًى لِّلْمُتَّقِينَ\";\nnormalize(sentence5, :alif_maksura)\nsentence6 = \"ﷺ\"\nnormalize(sentence6) === \"صلى الله عليه وسلم\"\nsentence7 = \"ﷻ\"\nnormalize(sentence7) === \"جل جلاله\"\nsentence8 = \"﷽\"\nnormalize(sentence8) === ar_basmala","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Or a combination,","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"normalize(ar_basmala, [:alif_khanjareeya, :hamzat_wasl])","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Broadcasting also applies to normalize function.","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"normalize.(sentence0)\nnormalize.(sentence0, [:alif_khanjareeya, :alif_hamza_below])","category":"page"},{"location":"man/basic_utilities/#Transliteration","page":"Basic Utilities","title":"Transliteration","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"By default, Yunir.jl uses extended Buckwalter transliteration. The function to use are encode (Arabic -> Roman) and arabic (Roman -> Arabic). The following are some examples:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"arabic(bw_basmala)\narabic(bw_basmala) === ar_basmala\nencode(ar_basmala)\nencode(ar_basmala) === bw_basmala","category":"page"},{"location":"man/basic_utilities/#Custom-Transliteration","page":"Basic Utilities","title":"Custom Transliteration","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"For custom transliteration, user must specify the character mapping in a dictionary with Symbol type for both keys and values. By default, the Buckwalter mapping used in Yunir.jl is encoded in the constant variable BW_ENCODING.","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"BW_ENCODING","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Suppose we want to create a custom transliteration by simply reversing the values of the dictionary, then we have the following:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"old_keys = collect(keys(BW_ENCODING));\nnew_vals = reverse(collect(values(BW_ENCODING)));","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"The new dictionary would be:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"my_encoder = Dict(old_keys .=> new_vals)","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Next is to declare this new transliteration so functions for dediacritization and normalization can use the new mapping. This is done using the macro @transliterator, which takes two arguments: the dictionary and the type name of the mapping.","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"@transliterator my_encoder \"MyEncoder\"","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Using this new transliteration, we now have an updated mapping for the basmala above:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"encode(ar_basmala)","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Reversing this two Arabic characters should give us the appropriate decoding:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"arabic(encode(ar_basmala))","category":"page"},{"location":"man/basic_utilities/#Dediacritization-and-Normalization-on-Custom-Transliteration","page":"Basic Utilities","title":"Dediacritization and Normalization on Custom Transliteration","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"As mentioned above, dediacritization and normalization also works on new custom transliteration. For example, dediacritizing the encoded ar_basmala would give us:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"dediac(encode(ar_basmala); isarabic=false)\n\ndediac(encode(ar_basmala); isarabic=false) |> arabic","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"And for normalization, ","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"normalize(encode(ar_basmala); isarabic=false)\n\nnormalize(encode(ar_basmala); isarabic=false) |> arabic","category":"page"},{"location":"man/basic_utilities/#Reset-Transliteration","page":"Basic Utilities","title":"Reset Transliteration","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"To reset the transliteration back to Buckwalter, simply specify :default as the argument for the macro @transliterator as follows:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"@transliterator :default","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"With this, all functions dependent on transliteration will also get updated.","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"encode(ar_basmala)\nencode(ar_basmala) === bw_basmala\ndediac(encode(ar_basmala); isarabic=false)\nnormalize(encode(ar_basmala); isarabic=false)","category":"page"},{"location":"man/references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"man/references/","page":"References","title":"References","text":"A.-A. B. Asaad. Text Analytics of the Qur'ān. Master's thesis, University of the Philippines (06 2025).\n\n\n\nR. Farrin. Structure and Qur'anic Interpretation: A Study of Symmetry and Coherence in Islam's Holy Text. Islamic Encounter (White Cloud Press, 2014).\n\n\n\n","category":"page"},{"location":"#Welcome-to-Yunir.jl-Documentation","page":"Home","title":"Welcome to Yunir.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: codecov) (Image: MIT License) (Image: DOI)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Yunir.jl is a toolkit for Arabic Natural Language Processing (ANLP). It offers APIs for the building blocks of ANLP specifically dediacritization, normalization, transliteration (including custom transliteration), simple encoding, and orthographical analysis. It also has advanced capabilities for doing text alignment, rhythmic analysis and textual symmetry analysis. Lastly, it supports QuranTree.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Yunir (ينير) /yunīr/ is the Arabic word for \"illuminate.\" The logo is a Kufic calligraphy of the Arabic word نور /nūr/ or \"light,\" specifically, a heatless light such as that of the light of the moon.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the package, run the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"Yunir\")","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"@software{al_ahmadgaid_b_asaad_2022_6629868,\n  author       = {Al-Ahmadgaid B. Asaad},\n  title        = {{Yunir.jl: A lightweight Arabic NLP toolkit for \n                   Julia}},\n  month        = jun,\n  year         = 2022,\n  publisher    = {Zenodo},\n  version      = {v0.2.0},\n  doi          = {10.5281/zenodo.6629868},\n  url          = {https://doi.org/10.5281/zenodo.6629868}\n}","category":"page"},{"location":"#Outline","page":"Home","title":"Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"man/basic_utilities.md\",\n    \"man/orthography.md\",\n    \"man/text_alignment.md\",\n    \"man/qurantree.md\",\n    \"man/api.md\",\n    \"man/references.md\",\n]\nDepth = 2","category":"page"},{"location":"man/api/#API-References","page":"API","title":"API References","text":"","category":"section"},{"location":"man/api/#Yunir.AyahEmbeddings","page":"API","title":"Yunir.AyahEmbeddings","text":"Ayah Embeddings Type\n\nparams:     numslices - number of slices     varslices - variability of slices, parameter for Dirichlet distribution\n\n\n\n\n\n","category":"type"},{"location":"man/api/#Yunir.AyahMidpoints","page":"API","title":"Yunir.AyahMidpoints","text":"Midpoints Generator\n\nparams:     n_ayahs - total number of ayahs     n - number of samples of slices to generate     slicer - Slicer configuration\n\n\n\n\n\n","category":"type"},{"location":"man/api/#Yunir.Harakaat","page":"API","title":"Yunir.Harakaat","text":"Harakaat(char::Union{String, Char}, is_tanween::Bool)\n\nCreate a Harakaat object using char as the Arabic orthography, which is expected to be the  short vowels, sukūn, and tanween.\n\njulia> fatha = arabic(\"a\")\njulia> Harakaat(fatha, false)\nHarakaat(\"َ\", false)\n\n\n\n\n\n","category":"type"},{"location":"man/api/#Yunir.Segment","page":"API","title":"Yunir.Segment","text":"Segment(text::String, harakaat::Array{Harakaat})\n\nCreate a Segment object from text, which is the form of the segments of syllables,  where vowels of which are also listed as harakaat.\n\njulia> bw_segment = \"~aH?Hiy\"\njulia> Segment(bw_segment, Harakaat[Harakaat(\"a\", false), Harakaat(\"i\", false)])\nSegment(\"~aH?Hiy\", Harakaat[Harakaat(\"a\", false), Harakaat(\"i\", false)])\n\n\n\n\n\n","category":"type"},{"location":"man/api/#Yunir.Sequence","page":"API","title":"Yunir.Sequence","text":"Sequence(sequence::Vector{String}, y_axis::Vector{Int64})\n\nCreate a Sequence object for the rhythmic sequence data, with  y_axis as its y-axis ticks for plotting.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#Yunir.Slicer","page":"API","title":"Yunir.Slicer","text":"Slicer Configuration\n\nparams:     numslices - number of slices     varslices - variability of slices, parameter for Dirichlet distribution     dist_formula - distance metric for measuring similarity or distances of the slices\n\n\n\n\n\n","category":"type"},{"location":"man/api/#Yunir.Syllabification","page":"API","title":"Yunir.Syllabification","text":"Rhyme(is_quran::Bool, syllable::Syllable)\n\nCreate a Rhyme object with specifics for the syllable contructed through Syllable.  It also takes argument for is_quran to handle Qur'an input, which does not recite the last vowel in every last word of the verse. The following code creates a Syllable, which specifies 3 syllables with 1 leading and trailing characters to include.\n\njulia> ar_raheem_alamiyn = [\"ٱلرَّحِيمِ\", \"ٱلْعَٰلَمِينَ\"]\n2-element Vector{String}:\n \"ٱلرَّحِيمِ\"\n \"ٱلْعَٰلَمِينَ\"\njulia> r = Syllabification(true, Syllable(1, 1, 3))\nRhyme(true, Syllable{Int64}(1, 1, 3))\njulia> output = r.(ar_raheem_alamiyn, true)\n2-element Vector{Segment}:\n Segment(\"َّح?حِي\", Harakaat[Harakaat(\"َ\", false), Harakaat(\"ِ\", false)])\n Segment(\"عَٰ?لَم?مِي\", Harakaat[Harakaat(\"َ\", false), Harakaat(\"َ\", false), Harakaat(\"ِ\", false)])\njulia> encode.(output)\n2-element Vector{Segment}:\n Segment(\"~aH?Hiy\", Harakaat[Harakaat(\"a\", false), Harakaat(\"i\", false)])\n Segment(\"Ea`?lam?miy\", Harakaat[Harakaat(\"a\", false), Harakaat(\"a\", false), Harakaat(\"i\", false)])\n\n\n\n\n\n","category":"type"},{"location":"man/api/#Yunir.Syllabification-Tuple{String}","page":"API","title":"Yunir.Syllabification","text":"(r::Syllabification)(text::String, isarabic::Bool=false)\n\nCall function for the Syllabification object. It extracts the rhyme features of text using the options from the Syllabification object specified by r. It can handle both Arabic and Buckwalter input by toggling isarabic. \n\nNote: This will only work with @transliterator :default\n\njulia> ar_raheem = \"ٱلرَّحِيمِ\"\n\"ٱلرَّحِيمِ\"\njulia> r = Syllabification(true, Syllable(1, 2, 1))\nSyllabification(true, Syllable{Int64}(1, 2, 1))\njulia> output = r(ar_raheem, true)\nSegment(\"حِيم\", Harakaat[Harakaat(\"ِ\", false)])\njulia> encode(output)\nSegment(\"Hiym\", Harakaat[Harakaat(\"i\", false)])\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.Syllable","page":"API","title":"Yunir.Syllable","text":"Syllable{T <: Number}(\n    lead_nchars::T,\n    trail_nchars::T,\n    nvowels::T\n)\n\nCreate a Syllable object specifying the number of vowels nvowels to capture, and  also the number of leading (lead_nchars) and trailing characters (trail_nchars)  around the vowel. This object is used as an input for the Rhyme object. The following code creates a Syllable, which specifies 3 syllables with 1 leading and trailing characters to include.\n\njulia> Syllable(1, 1, 3)\nSyllable{Int64}(1, 1, 3)\n\n\n\n\n\n","category":"type"},{"location":"man/api/#Base.join","page":"API","title":"Base.join","text":"join(harakaat::Array{Harakaat})\n\nJoin function for handling Harakaat object. It joins the harakaat together with ? separator.\n\njulia> ar_raheem = \"ٱلرَّحِيمِ\"\n\"ٱلرَّحِيمِ\"\n\njulia> r = Rhyme(true, Syllable(1, 2, 2))\nRhyme(true, Syllable{Int64}(1, 2, 2))\n\njulia> output = r(ar_raheem, true)\nSegment(\"َّحِ?حِيم\", Harakaat[Harakaat(\"َ\", false), Harakaat(\"ِ\", false)])\n\njulia> join(encode(output).harakaat)\n\"a?i\"\n\n\n\n\n\n","category":"function"},{"location":"man/api/#Yunir.align-Tuple{Array{String}, Array{String}}","page":"API","title":"Yunir.align","text":"align(src::Array{String}, tgt::Array{String}; \n\tcostmodel::CostModel=CostModel(match=0, mismatch=1, insertion=1, deletion=0),\n\tstore_results::Bool=true\n)\n\nALign tgt array of texts to src array of texts using a particular costmodel from BioAlignments.jl. store_results if results of alignment are stored or returned,  otherwise, only the scores are returned.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.align-Tuple{String, String}","page":"API","title":"Yunir.align","text":"align(src::String, tgt::String; costmodel::BioAlignments.CostModel=BioAlignments.CostModel(match=0, mismatch=1, insertion=1, deletion=1))\n\nAlign tgt string to src string using a particular costmodel from BioAlignments.jl.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.arabic-Tuple{String}","page":"API","title":"Yunir.arabic","text":"arabic(s::String[, encoder::AbstractEncoder])\n\nEncode the String object into Arabic characters. Custom encoder generated from @transliterator can be provided, but default is Buckwalter.\n\nExamples\n\njulia> bw_basmala = \"bisomi {ll~ahi {lr~aHoma`ni {lr~aHiymi\"\njulia> arabic(bw_basmala)\n\"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.clean","page":"API","title":"Yunir.clean","text":"clean(s::String, replace_non_ar::String, target_regex::Regex)\n\nClean the input text by replacing all non-Arabic texts with a string input.\n\n\n\n\n\n","category":"function"},{"location":"man/api/#Yunir.crossover!-Union{Tuple{T}, Tuple{AyahMidpoints{T}, Float64}} where T<:Integer","page":"API","title":"Yunir.crossover!","text":"Parent's Chromosome Crossover\n\nThe parents chromosome are crossed-over \n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.dediac-Tuple{String}","page":"API","title":"Yunir.dediac","text":"dediac(s::String; isarabic::Bool=true)\n\nDediacritize the input String object.\n\nExamples\n\njulia> bw_basmala = \"bisomi {ll~ahi {lr~aHoma`ni {lr~aHiymi\"\njulia> dediac(bw_basmala)\n\"bsm {llh {lrHmn {lrHym\"\njulia> dediac(arabic(bw_basmala))\n\"بسم ٱلله ٱلرحمن ٱلرحيم\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.encode-Tuple{String}","page":"API","title":"Yunir.encode","text":"encode(s::String)\n\nTransliterate the input String object using Buckwalter.\n\nExamples\n\njulia> ar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\"\njulia> encode(ar_basmala)\n\"bisomi {ll~ahi {lr~aHoma`ni {lr~aHiymi\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.encode-Tuple{Union{Char, String}, AbstractEncoder}","page":"API","title":"Yunir.encode","text":"encode(s::Union{Char,String}, encoder::AbstractEncoder)\n\nTransliterate the input String object using a custom encoder. Custom encoder is generated using the @transliterator.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.fitness-Union{Tuple{T}, Tuple{Array{Array{AyahEmbeddings{T}, 1}, 1}, Slicer}} where T<:Union{Float32, Float64}","page":"API","title":"Yunir.fitness","text":"Circular-wise Computation of the Distance of Slices\n\nparams:     five_nums - five number summaries     slicer - Slicer configuration     dist - a Distances UnionSemiMetric\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.five_summary-Union{Tuple{Vector{T}}, Tuple{T}} where T<:Union{Float32, Float64}","page":"API","title":"Yunir.five_summary","text":"Compute Five Number Summary\n\nfive_summary(v::Vector{T}) where T<:Union{Float32,Float64} params:     v - data (e.g. embeddings)\n\nfive_summary(slices::Vector{Vector{Matrix{T}}}) where T<:Union{Float32,Float64} params:     slices - slices of data (e.g. ayah embeddings)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.gen_slices-Union{Tuple{T}, Tuple{AyahEmbeddings{T}, AyahMidpoints}} where T<:Union{Float32, Float64}","page":"API","title":"Yunir.gen_slices","text":"Slices Generator\n\nparams:     ayahs_emb - the embeddings to slice     midpoints - the midpoints used for slicing\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.isfeat-Tuple{Orthography, Type{<:AbstractConsonant}}","page":"API","title":"Yunir.isfeat","text":"isfeat(x::Orthography, y::Type{<:AbstractConsonant})\n\nchecks if x is a y feature.\n\njulia> ar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\";\njulia> arb_token = tokenize(ar_basmala)\n4-element Vector{String}:\n \"بِسْمِ\"\n \"ٱللَّهِ\"\n \"ٱلرَّحْمَٰنِ\"\n \"ٱلرَّحِيمِ\"\njulia> arb_parsed2 = parse.(Orthography, arb_token)\n4-element Vector{Orthography}:\n Orthography(Type[Ba, Kasra, Seen, Sukun, Meem, Kasra])\n Orthography(Type[AlifHamzatWasl, Lam, Lam, Shadda, Fatha, Ha, Kasra])\n Orthography(Type[AlifHamzatWasl, Lam, Ra, Shadda, Fatha, HHa, Sukun, Meem, Fatha, AlifKhanjareeya, Noon, Kasra])\n Orthography(Type[AlifHamzatWasl, Lam, Ra, Shadda, Fatha, HHa, Kasra, Ya, Meem, Kasra])\njulia> isfeat(arb_parsed2[1], AbstractLunar)\n6-element BitVector:\n 1\n 0\n 0\n 0\n 1\n 0\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.normalize","page":"API","title":"Yunir.normalize","text":"normalize(s::String)\n\nNormalize a Arabic or Buckwalter String characters.\n\nExamples\n\njulia> normalize(\"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\")\n\"بِسْمِ اللَّهِ الرَّحْمَانِ الرَّحِيمِ\"\n\n\n\n\n\n","category":"function"},{"location":"man/api/#Yunir.normalize-Tuple{String, Symbol}","page":"API","title":"Yunir.normalize","text":"normalize(s::String, char::Symbol; isarabic::Bool=true)\n\nNormalize a specific Arabic or Buckwalter String character (chars).\n\nExamples\n\njulia> ar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\"\njulia> normalize(ar_basmala, :alif_khanjareeya) === \"بِسْمِ ٱللَّهِ ٱلرَّحْمَانِ ٱلرَّحِيمِ\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.normalize-Tuple{String, Vector{Symbol}}","page":"API","title":"Yunir.normalize","text":"normalize(s::String, chars::Array{Symbol,1}; isarabic::Bool=true)\n\nNormalize a specific Arabic or Buckwalter String character/s (chars).\n\nExamples\n\njulia> ar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\"\njulia> normalize(ar_basmala, [:alif_khanjareeya, :hamzat_wasl]) === \"بِسْمِ اللَّهِ الرَّحْمَانِ الرَّحِيمِ\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.selection-Union{Tuple{T}, Tuple{AyahEmbeddings, AyahMidpoints{T}, T, Slicer}} where T<:Integer","page":"API","title":"Yunir.selection","text":"Tournament Selection of Parent's Chromosome\n\nThe function selects the parent's chromosome using tournament selection\n\nparams:     ayahs_emb - Ayah embeddings     mp - Midpoints of the Ayah     k - The size of samples from where the parent is chosen\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.sequence-Tuple{Array{Segment}, Union{Type{Harakaat}, Type{Segment}}}","page":"API","title":"Yunir.sequence","text":"sequence(segments::Array{Segment}, type::Union{Type{Harakaat},Type{Segment}})\n\nExtracts the sequence of the segments by indexing it into xandy, wherexis the index of the segment, andyis the index of its vowels or harakaat. It returns a tuple containing the followingy,y_dict(the mapping dictionary with key represented byxand value represented byy),syllablesrepresented byx`.\n\njulia> ar_raheem_alamiyn = [\"ٱلرَّحِيمِ\", \"ٱلْعَٰلَمِينَ\"]\n2-element Vector{String}:\n \"ٱلرَّحِيمِ\"\n \"ٱلْعَٰلَمِينَ\"\n\njulia> r = Rhyme(true, Syllable(1, 1, 2))\nRhyme(true, Syllable{Int64}(1, 1, 2))\n\njulia> segments = encode.(r.(ar_raheem_alamiyn, true))\n2-element Vector{Segment}:\n Segment(\"~aH?Hiy\", Harakaat[Harakaat(\"a\", false), Harakaat(\"i\", false)])\n Segment(\"lam?miy\", Harakaat[Harakaat(\"a\", false), Harakaat(\"i\", false)])\n\njulia> sequence(segments, Segment)\n([\"~aH?Hiy\", \"lam?miy\"], [1, 2], Dict(\"~aH?Hiy\" => 1, \"lam?miy\" => 2))\n\njulia> sequence(segments, Harakaat)\n([\"a?i\", \"a?i\"], [1, 1], Dict(\"a?i\" => 1))\n\njulia> syllables, y_vec, y_dict = transition(segments, Harakaat)\n([\"a?i\", \"a?i\"], [1, 1], Dict(\"a?i\" => 1))\n\njulia> using Makie\n\njulia> using CairoMakie\n\njulia> f = Figure(resolution=(500, 500));\n\njulia> a1 = Axis(f[1,1], \n           xlabel=\"Ayah Number\",\n           ylabel=\"Last Pronounced Syllable\n\n\n\",\n           title=\"Surah Al-Fatihah Rhythmic Patterns\n\n\",\n           yticks=(unique(y_vec), unique(syllables)), \n       )\nAxis with 1 plots:\n ┗━ Mesh{Tuple{GeometryBasics.Mesh{3, Float32, GeometryBasics.TriangleP{3, Float32, GeometryBasics.PointMeta{3, Float32, Point{3, Float32}, (:normals,), Tuple{Vec{3, Float32}}}}, GeometryBasics.FaceView{GeometryBasics.TriangleP{3, Float32, GeometryBasics.PointMeta{3, Float32, Point{3, Float32}, (:normals,), Tuple{Vec{3, Float32}}}}, GeometryBasics.PointMeta{3, Float32, Point{3, Float32}, (:normals,), Tuple{Vec{3, Float32}}}, GeometryBasics.NgonFace{3, GeometryBasics.OffsetInteger{-1, UInt32}}, StructArrays.StructVector{GeometryBasics.PointMeta{3, Float32, Point{3, Float32}, (:normals,), Tuple{Vec{3, Float32}}}, @NamedTuple{position::Vector{Point{3, Float32}}, normals::Vector{Vec{3, Float32}}}, Int64}, Vector{GeometryBasics.NgonFace{3, GeometryBasics.OffsetInteger{-1, UInt32}}}}}}}\n\n\njulia> lines!(a1, collect(eachindex(syllables)), y_vec)\nLines{Tuple{Vector{Point{2, Float32}}}}\n\njulia> f\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.syllabic_consistency-Tuple{Vector{Segment}, Dict{String, Int64}}","page":"API","title":"Yunir.syllabic_consistency","text":"syllabic_consistency(segments::Vector{Segment}, syllable_timings::Dict{String,Int64})\n\nCompute syllabicconsistency from a given segments and `syllabletimings. THIS WILL ONLY WORK IF THE VOWEL HAS ONLY 1 TRAIL``julia-repl julia> using Yunir julia> using QuranTree julia> crps, tnzl = load(QuranData()); julia> crpstbl = table(crps) julia> tnzltbl = table(tnzl) julia> bwtexts = verses(tnzltbl[2]) julia> texts = string.(split(bwtexts[1])) julia> r = Syllabification(true, Syllable(1, 0, 5)) julia> segments = Segment[] julia> j = 1 julia> for i in texts \t\t\tif j == 1 \t\t\t\tpush!(segments, r(encode(i), isarabic=false, firstword=true, silentlastvowel=false)) \t\t\telseif j == length(texts) \t\t\t\tpush!(segments, r(encode(i), isarabic=false, firstword=false, silentlastvowel=true)) \t\t\telse \t\t\t\tpush!(segments, r(encode(i), isarabic=false, firstword=false, silentlastvowel=false)) \t\t\tend \t\t\tj += 1 \t\tend julia> tajweedtimings = Dict{String,Int64}( \t\t\t\"i\"  => 1, \t\t\t\"a\"  => 1, \t\t\t\"u\"  => 1, \t\t\t\"F\"  => 1, \t\t\t\"N\"  => 1, \t\t\t\"K\"  => 1, \t\t\t\"iy\" => 2, \t\t\t\"aA\" => 2, \t\t\t\"uw\" => 2, \t\t\t\"^\"  => 4 \t\t) julia> syllabicconsistency(segments, tajweedtimings)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.tokenize","page":"API","title":"Yunir.tokenize","text":"tokenize(s::String)\n\ntokenizes the string input s by space, and also tokenizes the punctuations.\n\njulia> ar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\"\njulia> tokenize(ar_basmala)\n4-element Vector{String}:\n \"بِسْمِ\"\n \"ٱللَّهِ\"\n \"ٱلرَّحْمَٰنِ\"\n \"ٱلرَّحِيمِ\"\n\n\n\n\n\n","category":"function"},{"location":"man/api/#Yunir.@transliterator-Tuple{Any, Any}","page":"API","title":"Yunir.@transliterator","text":"@transliterator(dict, name)\n\nCreate a custom transliterator using an input dict (Dict object) with its corresponding name as String object. This will automatically update the transliterator inside all  functions like arabic, verses, and encode.\n\nExamples\n\njulia> my_encoder = Dict(\n    Symbol(Char(0x0621)) => Symbol('('),\n    Symbol(Char(0x0622)) => Symbol('''),\n    Symbol(Char(0x0623)) => Symbol('&'),\n    Symbol(Char(0x0624)) => Symbol('>'),\n    Symbol(Char(0x0625)) => Symbol('}'),\n    Symbol(Char(0x0626)) => Symbol('<'),\n    Symbol(Char(0x0627)) => Symbol('b'),\n    Symbol(Char(0x0628)) => Symbol('A'),\n    Symbol(Char(0x0629)) => Symbol('t'),\n    Symbol(Char(0x062A)) => Symbol('p'),\n    Symbol(Char(0x062B)) => Symbol('j'),\n    Symbol(Char(0x062C)) => Symbol('v'),\n    Symbol(Char(0x062D)) => Symbol('x'),\n    Symbol(Char(0x062E)) => Symbol('H'),\n    Symbol(Char(0x062F)) => Symbol('*'),\n    Symbol(Char(0x0630)) => Symbol('d'),\n    Symbol(Char(0x0631)) => Symbol('z'),\n    Symbol(Char(0x0632)) => Symbol('r'),\n    Symbol(Char(0x0633)) => Symbol('$'),\n    Symbol(Char(0x0634)) => Symbol('s'),\n    Symbol(Char(0x0635)) => Symbol('D'),\n    Symbol(Char(0x0636)) => Symbol('S'),\n    Symbol(Char(0x0637)) => Symbol('Z'),\n    Symbol(Char(0x0638)) => Symbol('T'),\n    Symbol(Char(0x0639)) => Symbol('g'),\n    Symbol(Char(0x063A)) => Symbol('E'),\n    Symbol(Char(0x0640)) => Symbol('f'),\n    Symbol(Char(0x0641)) => Symbol('_'),\n    Symbol(Char(0x0642)) => Symbol('k'),\n    Symbol(Char(0x0643)) => Symbol('q'),\n    Symbol(Char(0x0644)) => Symbol('m'),\n    Symbol(Char(0x0645)) => Symbol('l'),\n    Symbol(Char(0x0646)) => Symbol('h'),\n    Symbol(Char(0x0647)) => Symbol('n'),\n    Symbol(Char(0x0648)) => Symbol('Y'),\n    Symbol(Char(0x0649)) => Symbol('w'),\n    Symbol(Char(0x064A)) => Symbol('F'),\n    Symbol(Char(0x064B)) => Symbol('y'),\n    Symbol(Char(0x064C)) => Symbol('K'),\n    Symbol(Char(0x064D)) => Symbol('N'),\n    Symbol(Char(0x064E)) => Symbol('u'),\n    Symbol(Char(0x064F)) => Symbol('a'),\n    Symbol(Char(0x0650)) => Symbol('~'),\n    Symbol(Char(0x0651)) => Symbol('i'),\n    Symbol(Char(0x0652)) => Symbol('^'),\n    Symbol(Char(0x0653)) => Symbol('o'),\n    Symbol(Char(0x0654)) => Symbol('`'),\n    Symbol(Char(0x0670)) => Symbol('#'),\n    Symbol(Char(0x0671)) => Symbol(':'),\n    Symbol(Char(0x06DC)) => Symbol('{'),\n    Symbol(Char(0x06DF)) => Symbol('\"'),\n    Symbol(Char(0x06E0)) => Symbol('@'),\n    Symbol(Char(0x06E2)) => Symbol(';'),\n    Symbol(Char(0x06E3)) => Symbol('['),\n    Symbol(Char(0x06E5)) => Symbol('.'),\n    Symbol(Char(0x06E6)) => Symbol(','),\n    Symbol(Char(0x06E8)) => Symbol('-'),\n    Symbol(Char(0x06EA)) => Symbol('!'),\n    Symbol(Char(0x06EB)) => Symbol('%'),\n    Symbol(Char(0x06EC)) => Symbol('+'),\n    Symbol(Char(0x06ED)) => Symbol(']')\n);\njulia> @transliterator my_encoder \"MyEncoder\"\njulia> encode(ar_basmala)\n\"A~$^l~ :mmiun~ :mziux^lu#h~ :mziux~Fl~\"\n\n\n\n\n\n","category":"macro"},{"location":"man/api/#Yunir.@transliterator-Tuple{Any}","page":"API","title":"Yunir.@transliterator","text":"@transliterator(symbl)\n\nFallback to the default Buckwalter transliterator.\n\njulia> @transliterator :default\njulia> ar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\"\njulia> encode(ar_basmala)\n\"bisomi {ll~ahi {lr~aHoma`ni {lr~aHiymi\"\n\n\n\n\n\n","category":"macro"}]
}
